```
Output each floating-point value with two digits after the decimal point, which can be achieved as follows:
print('{:.2f}'.format(your_value))

Ex: If the input is:

5
30.0
50.0
10.0
100.0
65.0
the output is:

0.30
0.50
0.10
1.00
0.65
The 5 indicates that there are five floating-point values in the list, namely 30.0, 50.0, 10.0, 100.0, and 65.0. 100.0 is the largest value in the list, so each value is divided by 100.0.
```

float_list = []
num_input = int(input())
while num_input > 0:
    float_input = float(input())
    float_list.append(float_input)
    num_input -= 1
#print(float_list)

max_val = max(float_list)

new_float_list = []
for num in float_list:
    new_list_num = (num / max_val)
    new_float_list.append(new_list_num)

#print(new_float_list)
for num in new_float_list:
    print('{:.2f}'.format(num))
    
    
    
    
    
    
```
As long as x is greater than 0
   Output x modulo 2 (remainder is either 0 or 1)
   Assign x with x divided by 2
Note: The above algorithm outputs the 0's and 1's in reverse order.

Ex: If the input is:

6
the output is:

011
6 in binary is 110; the algorithm outputs the bits in reverse.
```
number = int(input())
binary_list = []
while number > 0:
    binary_bits = number % 2
    number = int(number / 2)
    binary_list.append((int(binary_bits)))

#binary_list.reverse()

for bits in binary_list:
    print(bits, end = '')
print()



```
Write a program that takes in a positive integer as input, and outputs a string of 1's and 0's representing the integer in binary. For an integer x, the algorithm is:

As long as x is greater than 0
   Output x % 2 (remainder is either 0 or 1)
   x = x // 2
Note: The above algorithm outputs the 0's and 1's in reverse order. You will need to write a second function to reverse the string.

Ex: If the input is:

6
the output is:

110
The program must define and call the following two functions. Define a function named int_to_reverse_binary() that takes an integer as a parameter and returns a string
of 1's and 0's representing the integer in binary (in reverse). Define a function named string_reverse() that takes an input string as a parameter and returns a string
representing the input string in reverse.

def int_to_reverse_binary(integer_value)
def string_reverse(input_string)
```

def int_to_reverse_binary(number):
    binary_list = []
    binary_string = ''
    while number > 0:
        binary_bits = number % 2
        number = int(number / 2)
        binary_list.append((int(binary_bits)))
    for bits in binary_list:
        binary_string += str(bits)
    return binary_string

def string_reverse(input_string):
    reverse_string = input_string[::-1]
    return reverse_string

if __name__ == '__main__':
    number = int(input())
    binary_string = int_to_reverse_binary(number)
    reverse_string = string_reverse(binary_string)
    print(reverse_string)
    
    
    
    



```
Many user-created passwords are simple and easy to guess. Write a program that takes a simple password and makes it stronger by replacing characters using the key below, and by appending "!" to the end of the input string.

i becomes 1
a becomes @
m becomes M
B becomes 8
s becomes $
Ex: If the input is:

mypassword
the output is:

Myp@$$word!
```
word = input()
password = ''

for letter in word:
    if letter == 'i':
        password += '1'
    elif letter == 'a':
        password += '@'
    elif letter == 'm':
        password += 'M'
    elif letter == 'B':
        password += '8'
    elif letter == 's':
        password += '$'
    else:
        password += letter

password += '!'
print(password)

        



```
Numerous engineering and scientific applications require finding solutions to a set of equations. Ex: 8x + 7y = 38 and 3x - 5y = -1 have a solution x = 3, y = 2. Given integer coefficients of two linear equations with variables x and y, use brute force to find an integer solution for x and y in the range -10 to 10.

Ex: If the input is:

8
7
38
3
-5
-1
Then the output is:

x = 3 , y = 2
Use this brute force approach:

For every value of x from -10 to 10
   For every value of y from -10 to 10
      Check if the current x and y satisfy both equations. If so, output the solution, and finish.
Ex: If no solution is found, output:

There is no solution
You can assume the two equations have no more than one solution.
```
# Read in first equation, ax + by = c '''
a = int(input())
b = int(input())
c = int(input())

# Read in second equation, dx + ey = f '''
d = int(input())
e = int(input())
f = int(input())

solutionx = 0
solutiony = 0

solutiond = 0
solutione = 0

for x in range(-10, 10):
    for y in range (-10, 10):
        if (x * a) + (b * y) == c and (x * d) + (y * e) ==f:
            solutionx = x
            solutiony = y
            break
        
if solutionx != 0 and solutiony != 0:
    print(f"x = {solutionx} , y = {solutiony}")
else:
    print("There is no solution")




```
Primary U.S. interstate highways are numbered 1-99. Odd numbers (like the 5 or 95) go north/south, and evens (like the 10 or 90) go east/west. Auxiliary highways are 
numbered 100-999, and service the primary highway indicated by the rightmost two digits. Thus, I-405 services I-5, and I-290 services I-90.

Given a highway number, indicate whether it is a primary or auxiliary highway. If auxiliary, indicate what primary highway it serves. Also indicate if the (primary)
highway runs north/south or east/west.
```

highway_number = int(input())
highway_str = str(highway_number)

if len(highway_str) == 2:
    hwy_type = "primary"
else:
    hwy_type = "auxiliary"

if highway_number < 1000 and highway_number > 0:
    if highway_number > 0 and highway_number <= 99:
        if highway_number % 2 == 0 and len(highway_str) == 2:
            print(f"I-{highway_str} is {hwy_type}, going east/west.")
        elif highway_number % 2 != 0 and len(highway_str) == 2:
            print(f"I-{highway_str} is {hwy_type}, going north/south.")
    if highway_number >= 100 and highway_number < 999:
        if highway_number % 2 == 0 and len(highway_str) == 3:
            print(f"I-{highway_str} is {hwy_type}, serving I-{highway_str[1:]}, going east/west.")
        elif highway_number % 2 != 0 and len(highway_str) == 3:
            print(f"I-{highway_str} is {hwy_type}, serving I-{highway_str[1:]}, going north/south.")
else:
    print(f"{highway_number} is not a valid interstate highway number.")
    


```
Write a program that takes a date as input and outputs the date's season. The input is a string to represent the month and an int to represent the day.
The dates for each season are:
Spring: March 20 - June 20
Summer: June 21 - September 21
Autumn: September 22 - December 20
Winter: December 21 - March 19
```
input_month = input()
input_day = int(input())

spring_month_list = ['March', 'April', "May", "June"]
summer_month_list = ['June', 'July', "August", "September"]
autumn_month_list = ['September', 'October', "November", "December"]
winter_month_list = ['December', 'January', "February", "March"]

month_day_dict = {
    'January' : 31,
    'February': 28,
    'March' : 31,
    'April' : 30,
    'May' : 31,
    'June' : 30,
    'July' : 31,
    'August' : 31,
    'September' : 30,
    'October' : 31,
    'November' : 30,
    'December' : 31
    }

valid_date = True        
valid_month = True
if input_month not in dict.keys(month_day_dict):
    valid_month = False
    print('Invalid')
elif month_day_dict[input_month] < input_day or input_day <= 0:
        valid_date = False
        print('Invalid')
    
    
if valid_date == True and valid_month == True:
    if input_month in spring_month_list:
        if input_month == 'March':
            if input_day < 20:
                print("Winter")
            else:
                print("Spring")
        elif input_month == 'June':
             if input_day < 21:
                 print("Spring")
             else:
                 print("Summer")
        else: 
            print("Spring")
    elif input_month in summer_month_list:
        if input_month == 'June':
            if input_day < 21:
                print("Spring")
            else:
                print("Summer")
        elif input_month == 'September':
             if input_day < 22:
                 print("Summer")
             else:
                 print("Autumn")
        else:
            print("Summer")
    elif input_month in autumn_month_list:
        if input_month == 'September':
            if input_day < 22:
                print("Summer")
            else:
                print("Autumn")
        elif input_month == 'December':
             if input_day < 21:
                 print("Autumn")
             else:
                 print("Winter")
        else: 
            print("Autumn")
    elif input_month in winter_month_list:
        if input_month == 'December':
            if input_day < 21:
                print("Autumn")
            else:
                print("Winter")
        elif input_month == 'March':
             if input_day < 20:
                 print("Winter")
             else:
                 print("Spring")
        else:
            print("Winter")




```
A year in the modern Gregorian Calendar consists of 365 days. In reality, the earth takes longer to rotate around the sun. To account for the difference in time, 
every 4 years, a leap year takes place. A leap year is when a year has 366 days: An extra day, February 29th. The requirements for a given year to be a leap year are:
1) The year must be divisible by 4
2) If the year is a century year (1700, 1800, etc.), the year must be evenly divisible by 400
```
is_leap_year = False
   
input_year = int(input())

if input_year % 100 == 0:
    if input_year % 400 == 0:
        is_leap_year = True
elif input_year % 4 == 0:
    is_leap_year = True

if is_leap_year == False:
    print(f"{input_year} - not a leap year")
else:
    print(f"{input_year} - leap year")






```
Golf scores record the number of strokes used to get the ball in the hole. The expected number of strokes varies from hole to hole and is called par (i.e. 3, 4, or 5). Each score's name is based on the actual strokes taken compared to par:
"Eagle": number of strokes is two less than par
"Birdie": number of strokes is one less than par
"Par": number of strokes equals par
"Bogey": number of strokes is one more than par
Given two integers that represent par and the number of strokes used, write a program that prints the appropriate score name. Print "Error" if par is not 3, 4, or 5.
```
par_input = int(input())
stroke_input = int(input())
valid_par = True

if par_input in [3, 4, 5]:
    valid_par = True
else:
    valid_par = False

if valid_par == False:
    print("Error")
elif valid_par == True:
    if stroke_input == (par_input):
        print("Par")
    elif stroke_input == (par_input -1):
        print("Birdie")
    elif stroke_input == (par_input -2):
        print("Eagle")
    elif stroke_input > par_input:
        print("Bogey")
    


```
Calculate the volume of a pramid:
Relevant geometry equations:
Volume = base area x height x 1/3
Base area = base length x base width.
```
def calc_pyramid_volume(length, width, height):
    base = length * width
    volume = (base * height) * 1/3
    return volume

length = float(input())
width = float(input())
height = float(input())
print('Volume for', length, width, height, "is:", calc_pyramid_volume(length, width, height))



```
Take in 5 integers via input and organize them.
Match the output with the below sample:

Enter 5 integers:
0 5
1 99
2 -44
3 0
4 12
Numbers: 5 99 -44 0 12
Odd numbers: 5 99
Negative numbers: -44
```

#
size = 5

def get_numbers(num):
    numbers = []
    user_input = input('Enter {} integers:\n'.format(num))

    i = 0
    for token in user_input.split():
        number = int(token)     # Convert string input into integer
        numbers.append(number)  # Add to numbers list
        print(i, number)
        i += 1
    return numbers

def print_all_numbers(numbers):
    print("Numbers: ", end=' ')
    for nums in numbers:
        print(nums, end=' ')
    print()

def print_odd_numbers(numbers):
    odd_list = []
    for odd in numbers:
        if odd % 2 != 0:
            odd_list.append(odd)    
    print('Odd numbers:', end=' ')
    for odd in odd_list:
        print(odd, end=' ')
    print()

def print_negative_numbers(numbers):
    neg_list = []
    for num in numbers:
        if num < 0:
            neg_list.append(num)
    print('Negative numbers:', end=' ')
    for neg in neg_list:
        print(neg, end=' ')
    print()


nums = get_numbers(size)
print_all_numbers(nums)
print_odd_numbers(nums)
print_negative_numbers(nums)




```
Write a function swap that swaps the first and last elements of a list argument.

Sample output with input: 'all,good,things,must,end,here'
['here', 'good', 'things', 'must', 'end', 'all']
```
def swap(values):
    firstindex = 0
    lastindex = len(values) - 1
    tempfirst = values[firstindex]
    templast = values[lastindex]
    values[firstindex] = templast
    values[lastindex] = tempfirst

values_list = input().split(',')  # Program receives comma-separated values like 5,4,12,19
swap(values_list)
print(values_list)


```
Amusement Park Line Queuing Program
```
riders_per_ride = 3  # Num riders per ride to dispatch

line = []  # The line of riders
num_vips = 0  # Track number of VIPs at front of line

menu = ('(1) Reserve place in line.\n'  # Add rider to line
        '(2) Reserve place in VIP line.\n'  # Add VIP
        '(3) Dispatch riders.\n'  # Dispatch next ride car
        '(4) Print riders.\n'
        '(5) Exit.\n\n')

user_input = input(menu).strip().lower()

while user_input != '5':
    if user_input == '1':  # Add rider 
        name = input('Enter name:').strip().lower()
        print(name)
        line.append(name)

    elif user_input == '2':  # Add VIP
        name = input('Enter name:').strip().lower()
        print(name)
        line.insert(num_vips, name)
        num_vips += 1

    elif user_input == '3':  # Dispatch ride
        if num_vips >= 3:
            num_vips -= 3
        elif num_vips < 3:
            num_vips = 0
        else:
            num_vips = 0
        for riders in range(riders_per_ride):
            if len(line) >= riders_per_ride:
                line.pop(0)
            else:
                line.clear()

    elif user_input == '4':  # Print riders waiting in line
        print('{} person(s) waiting:'.format(len(line)), line)

    else:
        print('Unknown menu option')

    user_input = input('Enter command: ').strip().lower()
    print(user_input)





```
Contact List (Lists Only)
Write a program that first takes in word pairs that consist of a name and a phone number (both strings). That list is followed by a name, and your program should 
output the phone number associated with that name.

Ex: If the input is:

Joe 123-5432 Linda 983-4123 Frank 867-5309
Frank
the output is:

867-5309
```
inputstr = input().split()
namestr = input()
namelist = []
phonelist = []

namelist = inputstr[0::2]
phonelist = inputstr[1::2]

for name in namelist:
    if name == namestr:
        print(phonelist[namelist.index(name)])
     


```
Test if a list is in order
```
def in_order(nums):
    i = 1
    flag = True
    while i < len(nums):
        if nums[i] < nums[i - 1]:
            flag = False
        i += 1
    return flag
        
    
if __name__ == '__main__':
    # Test out-of-order example
    nums1 = [5, 6, 7, 8, 3]
    if in_order(nums1):
        print('In order')
    else:
        print('Not in order')
        
    # Test in-order example
    nums2 = [5, 6, 7, 8, 10]
    if in_order(nums2):
        print('In order')
    else:
        print('Not in order')


```
Parsing Dates
Write a program to read dates from input, one date per line. Each date's format must be as follows: March 1, 1990. Any date not following that format is incorrect and should 
be ignored. The input ends with -1 on a line alone. Output each correct date as: 3/1/1990.

Hint: Use string[start:end] to get a substring when parsing the string and extracting the date. Use the split() method to break the input into tokens.

Ex: If the input is:

March 1, 1990
April 2 1995
7/15/20
December 13, 2003
-1
then the output is:

3/1/1990
12/13/2003
```
def get_month_as_int(monthString):

    if monthString == 'January':
        month_int = 1
    elif monthString == 'February':
        month_int = 2
    elif monthString == 'March':
        month_int = 3
    elif monthString == 'April':
        month_int = 4
    elif monthString == 'May':
        month_int = 5
    elif monthString == 'June':
        month_int = 6
    elif monthString == 'July':
        month_int = 7
    elif monthString == 'August':
        month_int = 8
    elif monthString == 'September':
        month_int = 9
    elif monthString == 'October':
        month_int = 10
    elif monthString == 'November':
        month_int = 11
    elif monthString == 'December':
        month_int = 12
    else:
        month_int = 0

    return month_int


user_string = ''

while user_string != '-1':
    user_string = input()
    if user_string != '-1':
        if ',' in user_string:
            user_split_string = user_string.split(' ')
            if user_split_string[1].endswith(','):
                month_int= get_month_as_int(user_split_string[0])
                date_int = user_split_string[1].replace(',', '')
                year_int = user_split_string[2]
                print(f"{month_int}/{date_int}/{year_int}")



```
Car Wash
Write a program to calculate the total price for car wash services. A base car wash is $10. A dictionary with each additional service and the corresponding 
cost has been provided. Two additional services can be selected. A '-' signifies an additional service was not selected. Output all selected services, according 
to the input order, along with the corresponding costs and then the total price for all car wash services.

Ex: If the input is:

Tire shine
Wax
the output is:

ZyCar Wash
Base car wash -- $10
Tire shine -- $2
Wax -- $3
----
Total price: $15

```
services = { 'Air freshener' : 1 , 'Rain repellent': 2, 'Tire shine' : 2, 'Wax' : 3, 'Vacuum' : 5 }
base_wash = 10
total = 0
addon = 0

service_choice1 = input()
service_choice2 = input()


#output
print("ZyCar Wash")
print(f"Base car wash -- ${base_wash}")
if service_choice1 in services.keys():
    print(f"{service_choice1} -- ${services[service_choice1]}")
    addon += services[service_choice1]
if service_choice2 in services.keys():
    print(f"{service_choice2} -- ${services[service_choice2]}")
    addon += services[service_choice2]

print("----")
total = base_wash + addon
print(f"Total price: ${total}")


    
```
Given a set of text files containing synonyms for different words, complete the main program to output the synonyms for a specific word. 
Each text file contains synonyms for the word specified in the file’s name, and each row within the file lists the word’s synonyms that begin with the same letter, separated by a space. The program reads a word and a letter from the user and opens the text file associated with the input word. The program then stores the contents of the text file into a dictionary predefined in the program. Finally the program searches the dictionary and outputs all the synonyms that begin with the input letter, one synonym per line, or a message if no synonyms that begin with the input letter are found.

Hints: Use the first letter of a synonym as the key when storing the synonym into the dictionary. Assume all letters are in lowercase.

Ex: If the input of the program is:

educate
c
the program opens the file educate.txt, which contains:

brainwash brief
civilize coach cultivate

then the program outputs:

civilize
coach
cultivate
Ex: If the input of the program is:

educate
a
then the program outputs:

No synonyms for educate begin with a.
```

def create_dict(filename):
    with open(f'{filename}.txt') as f:
        word_dict = {}
        words = f.readlines()
        for word in words:
            newlist = word.replace('\n', '')
            word_dict[word[0]] = newlist
        return word_dict

def search_dict(letter, word_dict, filename):
    result = {}
    if letter in word_dict.keys():
        return word_dict[letter]

    
file = input()
letter = input()

word_dict = create_dict(file)
#print(word_dict)

result = search_dict(letter, word_dict, file)

if result == None:
    print(f'No synonyms for {file} begin with {letter}.')    
else:
    resultslist = result.split()
    for entry in resultslist:
        print(entry)



```
Write a program that first reads in the name of an input file, followed by two strings representing the lower and upper bounds of a search range. 
The file should be read using the file.readlines() method. The input file contains a list of alphabetical, ten-letter strings, each on a separate line. 
Your program should output all strings from the list that are within that range (inclusive of the bounds).
Notes:

There is a newline at the end of the output.
All input files are hosted in the zyLab and file names can be directly referred to. 
In the tests, the first word input always comes alphabetically before the second word input.
```

def read_file(file):
    with open(file) as f:
        words = f.read()
        wordlist = words.split('\n')
        return wordlist
        

file = input()
firstword = input()
lastword = input()

wordlist = read_file(file)

resultlist = []
for word in wordlist:
    if firstword <= word and lastword >= word:
        resultlist.append(word)

for word in resultlist:
    print(word)
    


```
Write a program that first reads in the name of an input file and then reads the file using the csv.reader() method. 
The file contains a list of words separated by commas. Your program should output the words and their frequencies
(the number of times each word appears in the file) without any duplicates.
```
import csv
file = input()

def create_list(file):
    with open(file, 'r') as f:
        word_list = []
        reader = csv.reader(f)
        for rows in reader:
            word_list.append(rows)
        return word_list

def count_words(word_list):
    word_count = {}
    for word in word_list:
        if word in word_count.keys():
            word_count[word] += 1
        elif word not in word_count.keys():
            word_count[word] = 1
    return word_count

x = create_list(file)
word_list = x[0]
word_count = count_words(word_list)
for k, v in word_count.items():
    print(k, v)
    

